-- Load Fluent UI Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/main/main.lua"))()
~local window = library.new("Ikorz - Blade Ball")
~
~-- Main Tab and Features Section
~local mainTab = window:addPage("Main Features", 5012544693)
~local section = mainTab:addSection("Auto Features")
~
~-- Toggles for Features
~local autoParryEnabled = false
~section:addToggle("Auto Parry", nil, function(state)
    autoParryEnabled = state
end)
-- Variables
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart
-- Function to initialize and update the character and HumanoidRootPart
local function updateCharacter()
character = player.Character or player.CharacterAdded:Wait() -- Wait for the character to spawn
    humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10) -- Wait for up to 10 seconds for the HumanoidRootPart
    if not humanoidRootPart then
        warn("HumanoidRootPart not found! Check if the character has fully loaded.")
    else
        print("Character initialized successfully with HumanoidRootPart.")
    end
end
-- Connect character respawn to updateCharacter
player.CharacterAdded:Connect(updateCharacter)
-- Initialize on script start
updateCharacter()

-- Auto Parry Function
local function autoParry()
    if not humanoidRootPart then
        warn("HumanoidRootPart is missing! Auto Parry cannot run.")
        return
    end
    for _, ball in ipairs(workspace:GetDescendants()) do
        if ball:IsA("Model") and ball.Name == "BladeBall" then
            local owner = ball:FindFirstChild("Owner")
            local ballPart = ball:FindFirstChildWhichIsA("BasePart")
            if owner and ballPart and owner.Value ~= player then
                local ballPosition = ballPart.Position
                local distance = (humanoidRootPart.Position - ballPosition).Magnitude
                if distance <= 10 then -- Adjust range for parry
                    game:GetService("VirtualUser"):CaptureController()
                    game:GetService("VirtualUser"):Button1Down(Vector2.new(0, 0))
                    task.wait(0.1)
                    game:GetService("VirtualUser"):Button1Up(Vector2.new(0, 0))
                    print("Parry triggered!")
                end
            end
        end
    end
end
-- Connect auto parry to RunService
game:GetService("RunService").Stepped:Connect(function()
    if autoParryEnabled then
        local success, errorMessage = pcall(autoParry)
        if not success then
            warn("Error in Auto Parry: " .. errorMessage)
        end
    end
end)er character respawn!")
    else
        print("Character and HumanoidRootPart updated successfully!")
    end
~end
~
~-- Listen for character respawn and update variables
~player.CharacterAdded:Connect(updateCharacter)
~
~-- Initialize HumanoidRootPart on script start
~updateCharacter()
~
~-- Auto Parry Function
~local function autoParry()
~    if not humanoidRootPart then return end -- Ensure HumanoidRootPart is available
~
~    for _, ball in ipairs(workspace:GetDescendants()) do
~        -- Check if the object is a BladeBall and belongs to another player
~        if ball:IsA("Model") and ball.Name == "BladeBall" then
~            local owner = ball:FindFirstChild("Owner")
~            local ballPart = ball:FindFirstChildWhichIsA("BasePart")
~            
~            if owner and ballPart and owner.Value ~= player then
~                local ballPosition = ballPart.Position
~                local distance = (humanoidRootPart.Position - ballPosition).Magnitude
~
~                if distance <= 10 then -- Adjust range for parry
~                    game:GetService("VirtualUser"):CaptureController()
~                    game:GetService("VirtualUser"):Button1Down(Vector2.new(0, 0))
~                    task.wait(0.1)
~                    game:GetService("VirtualUser"):Button1Up(Vector2.new(0, 0))
~                    print("Parry triggered!")
~                end
~            end
~        end
~    end
~end
~
~-- Connect auto parry function to RunService
~game:GetService("RunService").Stepped:Connect(function()
~    if autoParryEnabled then
~        pcall(autoParry) -- Ensure no errors stop the function
~    end
~end)    for _, ball in ipairs(workspace:GetDescendants()) do
~        if ball:IsA("Model") and ball.Name == "BladeBall" then
~            local owner = ball:FindFirstChild("Owner")
~            local ballPart = ball:FindFirstChildWhichIsA("BasePart")
~            
~            if owner and ballPart and owner.Value ~= player then
~                local ballPosition = ballPart.Position
~                local distance = (humanoidRootPart.Position - ballPosition).Magnitude
~
~                if distance <= 10 then -- Adjust range for parry
~                    game:GetService("VirtualUser"):CaptureController()
~                    game:GetService("VirtualUser"):Button1Down(Vector2.new(0, 0))
~                    task.wait(0.1)
~                    game:GetService("VirtualUser"):Button1Up(Vector2.new(0, 0))
~                    print("Parry triggered!")
~                end
~            end
~        end
~    end
~end
~
~-- Connect auto parry function to RunService
~game:GetService("RunService").Stepped:Connect(function()
~    if autoParryEnabled then
~        pcall(autoParry) -- Ensure no errors stop the function
~    end
~end)
0 commit comments
Comments
0
 (0)
